package com.rssoft.Spring_Project.controller;import com.rssoft.Spring_Project.models.Clients;import com.rssoft.Spring_Project.repositories.ClientRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import java.util.Date;import java.util.List;@Controller@RequestMapping("/clients")public class ClientController {    @Autowired    private ClientRepository clientRepository;    @GetMapping({"", "/"})    public String getAllClients(Model model) {        var clients = clientRepository.findAll(Sort.by(Sort.Direction.DESC, "id"));        model.addAttribute("clients", clients);        return "clients/index";    }    @GetMapping("/add")    public String showAddForm(Model model) {        model.addAttribute("client", new Clients());        return "clients/add";    }    @PostMapping("/add")    public String addClient(@ModelAttribute("client") Clients client) {        client.setCreatedAt(new Date());        client.setStatus("active");        clientRepository.save(client);        return "redirect:/clients";    }    @GetMapping("/edit/{id}")    public String editClientForm(@PathVariable int id, Model model) {        Clients client = clientRepository.findById(id).orElseThrow(() -> new IllegalArgumentException("Invalid client ID: " + id));        model.addAttribute("client", client);        return "clients/edit"; // returns edit.html    }    @PostMapping("/update/{id}")    public String updateClient(@PathVariable int id, @ModelAttribute("client") Clients updatedClient) {        Clients client = clientRepository.findById(id)                .orElseThrow(() -> new IllegalArgumentException("Invalid client ID: " + id));        client.setFirstName(updatedClient.getFirstName());        client.setLastName(updatedClient.getLastName());        client.setEmail(updatedClient.getEmail());        client.setPhone(updatedClient.getPhone());        client.setAddress(updatedClient.getAddress());        client.setStatus(updatedClient.getStatus());        clientRepository.save(client);        return "redirect:/clients"; // fixed this line    }    @GetMapping("/delete/{id}")    public String deleteClient(@PathVariable int id) {        clientRepository.deleteById(id);        return "redirect:/clients";    }    @GetMapping("/search")    public String searchClients(@RequestParam("keyword") String keyword, Model model) {        List<Clients> result = clientRepository.findByFirstNameContainingIgnoreCaseOrLastNameContainingIgnoreCase(keyword, keyword);        model.addAttribute("clients", result);        return "clients/index"; // your main client listing template    }}